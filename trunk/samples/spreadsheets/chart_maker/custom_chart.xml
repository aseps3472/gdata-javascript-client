<?xml version="1.0" encoding="UTF-8"?>
<Module>
 <ModulePrefs title="GSpreadsheets Chart" height="275" scaling="false" 
description="View your spreadsheet data as a chart" author="Pamela Fox" 
author_email="pamelafox+coolgadget@gmail.com" screenshot="" thumbnail="" 
author_location="Los Angeles,CA" author_affiliation="Google" 
title_url="http://docs.google.com">
 <Require feature="setprefs"/>
 <Require feature="minimessage"/>
 </ModulePrefs>
 <UserPref name="ssKey" display_name="Spreadsheet Key" 
    default_value="o03712292828507838454.6243940683656382600"/>
 <UserPref name="wsId" display_name="Worksheet ID" default_value="od6"/>
 <UserPref name="chartWidth" display_name="Chart width" 
    default_value="250"/>
 <UserPref name="chartHeight" display_name="Chart height" 
    default_value="250"/>
 <UserPref name="densityY" display_name="Y axis density" 
    default_value="10"/>
 <UserPref name="densityX" display_name="Labels every (n) gridlines" 
    default_value="2"/>
 <UserPref name="xAxis" display_name="X Axis" default_value="year"/>
 <UserPref name="ds" display_name="Data series" datatype="list" 
    default_value="[column_name],[hex_color],[graph_type(1-3)]|revenue,FF0000,1"/>
 <UserPref name="showLegend" display_name="Show Legend" datatype="bool"
    default_value="true"/>
 <Content type="html">
<![CDATA[

<div id="chart" class="chart"></div>
<div id="messageBox"></div>
<script src="http://gdata-javascript-client.googlecode.com/svn/trunk/samples/thirdparty/webfxchart/excanvas.js"
    type="text/javascript"></script>
<script src="http://gdata-javascript-client.googlecode.com/svn/trunk/samples/thirdparty/webfxchart/chart.js"
    type="text/javascript"></script>
<script src="http://gdata-javascript-client.googlecode.com/svn/trunk/samples/thirdparty/webfxchart/canvaschartpainter.js"
    type="text/javascript"></script>
pt type="text/javascript" src="http://www.google.com/jsapi?key=ABQIAAAAVzcu66YGicZvSPDVjflWZRQkdwf30UEryoEcWYgVOc_USNqEkxQkdR_BWf8ImhnhR_oQp2C-OaTnJw">
</script>

<style type="text/css">
.chart {
  font: menu;
  background: white;
  color: black;
  overflow: hidden;
  position: relative;
}

.chart .legend {
  float: left;
  border: 1px solid black;
  background: white;
  padding: 5px 10px 5px 10px;
}

.chart .legend ul {
  margin: 0px;
  padding: 0px 0px 0px 20px;
}

.chart .legend ul li {
  list-style: square;
}

.chart .legend ul li span {
  color: black;
}
</style>

<script>
/* Copyright (c) 2007 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Loads the Google data JS Client Library
 */
google.load("gdata", "1");

var prefs = new _IG_Prefs(__MODULE_ID__);
var msg = new _IG_MiniMessage(__MODULE_ID__,_gel("messageBox"));

function SpreadsheetsChart(div, json, params) {
  this.div = div;
  this.json = json;
  this.params = params;
  div.style.width = this.params['chartWidth'];
  div.style.height = this.params['chartHeight'];
  
  this.params['densityX'] = parseInt(this.params['densityX']);
  this.params['densityY'] = parseInt(this.params['densityY']);
}

/**
* This function initializes the chart, sets chart properties,
* then iterates through the loaded feed to add data series to the chart.
*/
SpreadsheetsChart.prototype.loadAndDraw = function() {
  var chart = new Chart(this.div);
  chart.setDefaultType(CHART_LINE);

  if (this.params['showLegend'] == 'true') {
    chart.setShowLegend(true);
  } else {
    chart.setShowLegend(false);
  }

  chart.setGridDensity(this.json.feed.entry.length, this.params['densityY']);

  // This for loop corresponds to the "Show labels every X gridlines" setting.
  // It pushes a label if it's on the Xth gridline and a label exists, 
  // otherwise it pushes an empty string. 
  var horizontalLabels = [];
  for (var j = 0; j < this.json.feed.entry.length; j++) {
    var entry = this.json.feed.entry[j];
    if (j % this.params['densityX'] == 0 && entry['gsx$' + this.params['xAxis']]) {
      horizontalLabels.push(entry['gsx$' + this.params['xAxis']].$t);
    } else {
      horizontalLabels.push('');
    }
  }
  chart.setHorizontalLabels(horizontalLabels);

  var dataSeriesArray = this.params['ds'];
  for (var j = 0; j < dataSeriesArray.length; j++) {
    var dataSeries = dataSeriesArray[j].split(',');
    if (dataSeries.length == 3) {
      var dataSeriesName = dataSeries[0];
      var dataSeriesColor = dataSeries[1];
      var dataSeriesType = dataSeries[2];
      var dataSeriesValues = new Array();
      for (var k = 0; k < this.json.feed.entry.length; k++) {
        var entry = this.json.feed.entry[k];
        if (entry['gsx$' + dataSeriesName]) {
          dataSeriesValues.push(parseFloat(entry['gsx$' + dataSeriesName].$t));
        }
      }
      chart.add(dataSeriesName, '#' + dataSeriesColor, dataSeriesValues, 
          dataSeriesType);
    }
  }
  chart.draw();
}

/**
* Utility function to extract parameters appended to URL.
* @param {String} name Name of parameter in URL
* @return {String} Value of parameter, or '' if not found
*/
function getURLParam(name) {
  var regexS = '[\\?&]' + name + '=([^&#]*)';
  var regex = new RegExp(regexS);
  var results = regex.exec(window.location.href);
  return (results == null ? '' : results[1]);
}

/**
* Callback function for the spreadsheets query.
* This function uses the values from the URL to set chart parameters.
* It then creates a new SpreadsheetsChart object, passing in the worksheet JSON,
* div to hold the chart in, and the parameters.
*/
function loadWorksheet(json) {
  var params = {};

  params['chartWidth'] = prefs.getInt("chartWidth");
  params['chartHeight'] = prefs.getInt("chartHeight");
  params['densityX'] = prefs.getInt("densityX");
  params['densityY'] = prefs.getInt("densityY");
  params['xAxis'] = prefs.getString("xAxis");
  params['showLegend'] = prefs.getBool("showLegend");

  params['ds'] = prefs.getArray("ds");

  // For users looking to customize the data series or add more later,
  // we have a default first line that explains the parameters per data series.
  // Some users may delete this line later, so we only ignore it if it exists.
  if (params['ds'][0] == "[column_name],[hex_color],[graph_type(1-3)]") {
    params['ds'].shift();
  }
  
  var div = document.getElementById('chart');

  var spreadsheetsChart = new SpreadsheetsChart(div, json, params);
  spreadsheetsChart.loadAndDraw();
}

/**
 * Callback function for the GData JS Client Library to call when an error
 * occurs during the retrieval of the feed.  
 * @param {Error} e is an instance of an Error 
 */
function handleGDError(e) {
  alert('There has been an error trying to retrieve that feed. ' +   
        'Please check that you correctly typed the key and worksheet ID,' +
        ' and that you have published the worksheet.'); 
}

/**
 * Calls populateVars to set the global variables, changes chart div dimensions.
 * Uses the Javascript GData Client Library to send a query to 
 * retrieve spreadsheet feed, set the callback function to loadWorksheetJSON
 * and the error handling function to handleGDError.
 */
function getJSON() {
  var param_wsId = prefs.getString("wsId");
  var param_ssKey = prefs.getString("ssKey");
  
  var service = new google.gdata.client.GoogleService('wise', 'gdata-js-chart');
  var query = new google.gdata.client.Query(
    'http://spreadsheets.google.com/feeds/list/' + 
    param_ssKey + '/' + param_wsId + '/public/values');
  service.getFeed(query.getUri(), loadWorksheet, handleGDError);
}

_IG_RegisterOnloadHandler(getJSON);

</script>

]]>    
</Content>
</Module>
